<!DOCTYPE html>
<html>
<style>
#container{
	position: absolute;
	top:0px;
	left: 0px;
	width: 100%;
	height: 100%;
	background: #000;
	overflow: hidden;
	-moz-transform: scale(-1, 1);
	-webkit-transform: scale(-1, 1);
	-o-transform: scale(-1, 1);
	transform: scale(-1, 1);
	filter: FlipH;
}
.select{
	display: none;
}
</style>
<body oncontextmenu="return false;">
	<div id='container'>
		<center>
			<div class='select'>
				<label for='audioSource'>Audio source: </label><select id='audioSource'></select>
			</div>

			<div class='select'>
				<label for='videoSource'>Video source: </label><select id='videoSource'></select>
			</div>
			<video autoplay></video>
			<script type="text/javascript">
			var videoElement = document.querySelector("video");
			var audioSelect = document.querySelector("select#audioSource");
			var videoSelect = document.querySelector("select#videoSource");
			var startButton = document.querySelector("button#start");

			navigator.getUserMedia = navigator.getUserMedia ||
			navigator.webkitGetUserMedia || navigator.mozGetUserMedia;

			function gotSources(sourceInfos) {
				for (var i = 0; i != sourceInfos.length; ++i) {
					var sourceInfo = sourceInfos[i];
					var option = document.createElement("option");
					option.value = sourceInfo.id;
					if (sourceInfo.kind === 'audio') {
						option.text = sourceInfo.label || 'microphone ' + (audioSelect.length + 1);
						audioSelect.appendChild(option);
					} else if (sourceInfo.kind === 'video') {
						option.text = sourceInfo.label || 'camera ' + (videoSelect.length + 1);
						videoSelect.appendChild(option);
					} else {
						console.log('Some other kind of source: ', sourceInfo);
					}
				}
			}

			if (typeof MediaStreamTrack === 'undefined'){
				alert('This browser does not support MediaStreamTrack.\n\nTry Chrome Canary.');
			} else {
				MediaStreamTrack.getSources(gotSources);
			}


			function successCallback(stream) {
  window.stream = stream; // make stream available to console
  videoElement.src = window.URL.createObjectURL(stream);
  videoElement.play();
}

function errorCallback(error){
	console.log("navigator.getUserMedia error: ", error);
}

function start(){
	if (!!window.stream) {
		videoElement.src = null;
		window.stream.stop();
	}
	var audioSource = audioSelect.value;
	var videoSource = videoSelect.value;
	var constraints = {
		audio: {
			optional: [{sourceId: audioSource}]
		},
		video: {
			optional: [{sourceId: videoSource}]
		}
	};
	navigator.getUserMedia({
		"audio": true,
		"video": {
			"mandatory": {
				"minWidth": "1280",
				"maxWidth": "1280",
				"minHeight": "720",
				"maxHeight": "720",
				"minFrameRate": "30"
			},
			"optional": []
		}
	}, successCallback, errorCallback);
}

audioSelect.onchange = start;
videoSelect.onchange = start;

start();
</script>
</center>
</div>
</body>
</html>